{"version":3,"sources":["components/Button/Button.js","components/Counter/Counter.js","components/ListItem/ListItem.js","components/TextInput/TextInput.js","components/UpdatableList/UpdatableList.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","onClick","text","Counter","state","number","incrementNumber","_this","setState","decrementNumber","className","this","components_Button_Button","Component","ListItem","TextInput","onSubmit","type","name","UpdatableList","ListItems","addToList","event","preventDefault","joined","concat","target","value","components_TextInput_TextInput","map","item","key","components_ListItem_ListItem","App","components_Counter_Counter","components_UpdatableList_UpdatableList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNASeA,SANA,SAAAC,GACd,OACCC,EAAAC,EAAAC,cAAA,UAAQC,QAAUJ,EAAMI,SAAWJ,EAAMK,QCyB5BC,6MA1BbC,MAAQ,CACNC,OAAQ,KAGVC,gBAAkB,WAChBC,EAAKC,SAAU,CACbH,OAAQE,EAAKH,MAAMC,OAAS,OAGhCI,gBAAkB,WAChBF,EAAKC,SAAU,CACbH,OAAQE,EAAKH,MAAMC,OAAS,6EAK9B,OACEP,EAAAC,EAAAC,cAAA,OAAKU,UAAU,WACbZ,EAAAC,EAAAC,cAAA,UAAKW,KAAKP,MAAMC,QAChBP,EAAAC,EAAAC,cAACY,EAAD,CAAQX,QAASU,KAAKL,gBAAiBJ,KAAK,QAC5CJ,EAAAC,EAAAC,cAACY,EAAD,CAAQX,QAASU,KAAKF,gBAAiBP,KAAK,mBArB9BW,aCKPC,EANE,SAAAjB,GAChB,OACCC,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,OCOEa,EATG,SAAAlB,GACjB,OACCC,EAAAC,EAAAC,cAAA,QAAMgB,SAAUnB,EAAMmB,UACrBlB,EAAAC,EAAAC,cAAA,SAAOiB,KAAK,OAAOC,KAAK,cACxBpB,EAAAC,EAAAC,cAAA,SAAOiB,KAAK,aCoBAE,6MArBbf,MAAQ,CACNgB,UAAW,MAEbC,UAAY,SAACC,GACXA,EAAMC,iBACN,IAAIC,EAASjB,EAAKH,MAAMgB,UAAUK,OAAOH,EAAMI,OAAOX,UAAUY,OAChEpB,EAAKC,SAAU,CACbY,UAAWI,IAEbF,EAAMI,OAAOX,UAAUY,MAAQ,4EAG/B,OACE7B,EAAAC,EAAAC,cAAA,OAAKU,UAAU,kBACbZ,EAAAC,EAAAC,cAAC4B,EAAD,CAAWZ,SAAUL,KAAKU,YACzBV,KAAKP,MAAMgB,UAAUS,IAAK,SAACC,EAAMC,GAAP,OAAejC,EAAAC,EAAAC,cAACgC,EAAD,CAAUD,IAAKA,EAAK7B,KAAM4B,cAhBhDjB,aCkBboB,mLAhBX,OACEnC,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACbZ,EAAAC,EAAAC,cAAA,8CACAF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,oIACAF,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,+MACAF,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAAA,mBAZUa,aCQEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.62fab054.chunk.js","sourcesContent":["import React from 'react';\nimport './button.css';\n\nconst Button = props => {\n\treturn (\n\t\t<button onClick={ props.onClick }>{props.text}</button>\n\t);\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport Button from '../Button/Button';\n\nclass Counter extends Component {\n  state = {\n    number: 0,\n  }\n\n  incrementNumber = () => { \n    this.setState( {\n      number: this.state.number + 1,\n    } );\n  };\n  decrementNumber = () => { \n    this.setState( {\n      number: this.state.number - 1,\n    } );\n  };\n\n  render() {\n    return (\n      <div className=\"Counter\">\n        <h1>{this.state.number}</h1>\n        <Button onClick={this.incrementNumber} text=\"Add\" />\n        <Button onClick={this.decrementNumber} text=\"Remove\" />\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n","import React from 'react';\n\nconst ListItem = props => {\n\treturn (\n\t\t<li>{props.text}</li>\n\t);\n}\n\nexport default ListItem;","import React from 'react';\n\nconst TextInput = props => {\n\treturn (\n\t\t<form onSubmit={props.onSubmit}>\n\t\t\t<input type=\"text\" name=\"TextInput\" />\n\t\t\t<input type=\"submit\" />\n\t\t</form>\n\t);\n}\n\nexport default TextInput;","import React, { Component } from 'react';\nimport ListItem from '../ListItem/ListItem';\nimport TextInput from '../TextInput/TextInput';\n\nclass UpdatableList extends Component {\n  state = {\n    ListItems: []\n  }\n  addToList = (event) => { \n    event.preventDefault();\n    var joined = this.state.ListItems.concat(event.target.TextInput.value);\n    this.setState( {\n      ListItems: joined,\n    } );\n    event.target.TextInput.value = '';\n  };\n  render() {\n    return (\n      <div className=\"updatable-list\">\n        <TextInput onSubmit={this.addToList} />\n        {this.state.ListItems.map( (item, key) => <ListItem key={key} text={item} />)}\n      </div>\n    );\n  }\n}\n\nexport default UpdatableList;\n","import React, { Component } from 'react';\nimport Counter from './components/Counter/Counter';\nimport UpdatableList from './components/UpdatableList/UpdatableList';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>JS4WP - Study Group - React Week</h1>\n        <h2>Example 1: Counter</h2>\n        <p>Build a counter component that stores a count in state and lets you increment and decrement the count using two buttons</p>\n        <Counter />\n        <hr />\n        <h2>Example 2: Updatable List</h2>\n        <p>Build a Form with a Text Input Field. When the form gets submitted the Text Value of the Input should be added to a list stored in state that renders a ListItem Component for each Element in it.</p>\n        <UpdatableList />\n        <hr />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}